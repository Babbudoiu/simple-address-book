{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","nameHandler","event","setState","name","target","value","contactHandler","contact","state","list","bind","submitHandler","alert","this","preventDefault","newContact","className","onSubmit","for","id","type","placeholder","onChange","map","contacts","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAwEeA,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,YAAc,SAACC,GACb,EAAKC,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SAdjB,EAiBnBC,eAAiB,SAACL,GAChB,EAAKC,SAAS,CAACK,QAASN,EAAMG,OAAOC,SAhBrC,EAAKG,MAAQ,CACXL,KAAM,GACNI,QAAS,KACTE,KAAM,IAGR,EAAKT,YAAc,EAAKA,YAAYU,KAAjB,gBACnB,EAAKJ,eAAiB,EAAKA,eAAeI,KAApB,gBACtB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAVJ,E,iDAqBnB,SAAcT,GACZW,MAAM,sBAAwBC,KAAKL,MAAML,KAAO,IAAMU,KAAKL,MAAMD,SACjEN,EAAMa,iBACND,KAAKX,SAAS,CAACO,KAAK,GAAD,mBAAMI,KAAKL,MAAMC,MAAjB,CAAuB,CAACN,KAAMU,KAAKL,MAAML,KAAMI,QAASM,KAAKL,MAAMD,aACtF,IAAIQ,EAAa,CACfZ,KAAMU,KAAKL,MAAML,KACjBI,QAASM,KAAKL,MAAMD,SAEtBM,KAAKX,SAAS,CAAEO,KAAK,GAAD,mBAAMI,KAAKL,MAAMC,MAAjB,CAAuBM,IAAaZ,KAAM,GAAII,QAAS,O,oBAG7E,WACE,OACE,sBAAKS,UAAU,OAAf,UACE,0DACF,uBAAMC,SAAUJ,KAAKF,cAArB,UACE,uBAAOO,IAAI,OAAOC,GAAG,YAArB,kBAGE,uBAAOA,GAAG,OAAOd,MAAOQ,KAAKL,MAAML,KAAMiB,KAAK,OAAOC,YAAY,kBAAkBC,SAAUT,KAAKb,cAEpG,uBAAOkB,IAAI,UAAUC,GAAG,eAAxB,qBAGE,uBAAOA,GAAG,UAAUd,MAAOQ,KAAKL,MAAMD,QAASa,KAAK,OAAOC,YAAY,0BAA0BC,SAAUT,KAAKP,iBAElH,uBAAOc,KAAK,SAASf,MAAM,cAI9B,oBAAIc,GAAG,WAAP,SACEN,KAAKL,MAAMC,KAAKc,KAAI,SAASC,GAC5B,OAAO,+BAAKA,EAASrB,KAAd,IAAqBqB,EAASjB,uB,GAtD3BkB,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a32eb760.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      contact: null,\n      list: []\n    };\n\n    this.nameHandler = this.nameHandler.bind(this);\n    this.contactHandler = this.contactHandler.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n  }\n\n  nameHandler = (event) => {\n    this.setState({name: event.target.value})\n  }\n\n  contactHandler = (event) => {\n    this.setState({contact: event.target.value})\n  }\n\n  submitHandler(event) {\n    alert(\"New contact added: \" + this.state.name + \" \" + this.state.contact);\n    event.preventDefault();\n    this.setState({list: [...this.state.list, {name: this.state.name, contact: this.state.contact}]});\n    let newContact = {\n      name: this.state.name,\n      contact: this.state.contact\n    }\n    this.setState({ list: [...this.state.list, newContact], name: \"\", contact: \"\" });\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <h1>Save your contacts here!</h1>\n      <form onSubmit={this.submitHandler}>\n        <label for=\"name\" id=\"nameLabel\">\n          Name\n          </label>\n          <input id=\"name\" value={this.state.name} type=\"text\" placeholder=\"Enter name here\" onChange={this.nameHandler} />\n        \n        <label for=\"contact\" id=\"contactLabel\">\n          Contact\n          </label>\n          <input id=\"contact\" value={this.state.contact} type=\"text\" placeholder=\"Enter phone number here\" onChange={this.contactHandler} />\n        \n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n\n    \n     <ul id=\"mainList\">\n      {this.state.list.map(function(contacts) {\n        return <li>{contacts.name} {contacts.contact}</li>\n\n      })}\n\n      </ul>\n\n      </div>\n\n    );\n  };\n};\n  \n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}